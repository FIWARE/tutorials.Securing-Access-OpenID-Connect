#!/bin/bash
#
#  Command Line Interface to start all services associated with the Getting-Started Tutorial
#
#  For this tutorial the commands are merely a convenience script to run ${dockerCmd}#

set -e

dockerCmd="docker compose"
if (( $# == 2 )); then
    dockerCmd="docker-compose"
fi

if (( $# < 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|start|stop]"
    exit 1
fi

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrion-LD\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-orion` == "healthy" ]
	do
	  echo -e "Context Broker HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:1026/version'` " (waiting for 200)"
	  sleep 1
	done
}

waitForKeyrock () {
	echo -e "⏳ Waiting for \033[1;31mKeyrock\033[0m to be available\n"
	
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-keyrock` == "healthy" ]
	do 
		echo -e "Keyrock HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:3005/version'` " (waiting for 200)"
		sleep 5
	done
	echo -e " \033[1;32mdone\033[0m"
}

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	do 
		sleep 1
	done
}

waitForContext () {
	echo -e "\n⏳ Waiting for \033[1m@context\033[0m to be available\n"
	while [ `docker run --network fiware_default --rm curlimages/curl -s -o /dev/null -w %{http_code} 'http://context/ngsi-context.jsonld'` -eq 000 ]
	do 
		echo -e "@context HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:3004/ngsi-context.jsonld'` " (waiting for 200)"
		sleep 1
	done
}

waitForIoTAgent () {
	echo -e "\n⏳ Waiting for \033[1;36mIoT-Agent\033[0m to be available\n"
	while [ `docker run --network fiware_default --rm curlimages/curl -s -o /dev/null -w %{http_code} 'http://iot-agent:4041/version'` -eq 000 ]
	do 
		echo -e "IoT Agent HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://localhost:4041/version'` " (waiting for 200)"
		sleep 1
	done
}




loadData () {
	export CONTEXT_BROKER="$1" 

	waitForMongo
	addDatabaseIndex
	waitForContext
	waitForOrion
	docker run --rm -v $(pwd)/import-data:/import-data \
		--network fiware_default \
		-e CONTEXT_BROKER=${CONTEXT_BROKER} \
		-e TUTORIAL_DATA_MODELS_CONTEXT="http://context/ngsi-context.jsonld" \
		--entrypoint /bin/ash curlimages/curl import-data
	waitForIoTAgent
	docker run --rm -v $(pwd)/provision-devices:/provision-devices \
		--network fiware_default \
		-e CONTEXT_BROKER=${CONTEXT_BROKER} \
		--entrypoint /bin/ash curlimages/curl provision-devices

#	docker run --rm -v $(pwd)/link-devices:/link-devices \
#		--network fiware_default \
#		--entrypoint /bin/ash curlimages/curl link-devices

	echo ""
}

addDatabaseIndex () {
	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrion-LD\033[0m  ..."
	docker exec  db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	docker exec  db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"
}


displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*
	echo ""
}


stoppingContainers () {
	echo "Stopping running containers"
	${dockerCmd} down -v --remove-orphans
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|start|stop]"
        ;;
	"start")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		echo -e "Starting containers: \033[1;31mKeyrock\033[0m, \033[1mTutorial\033[0m and and \033[1mMySQL\033[0m databases."
		echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo -e "- \033[1;31mKeyrock\033[0m is an Identity Management Front-End"
		export IDM_HTTPS_ENABLED=false
		echo ""
		${dockerCmd} -f docker-compose.yml up -d --remove-orphans
		loadData orion:1026
		displayServices fiware
		echo -e "Now open \033[4mhttp://localhost:3000\033[0m"
		;;
	"stop")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		;;
	"create")
		export $(cat .env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull curlimages/curl
		${dockerCmd} pull 
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|start|stop]"
		exit 127;
		;;
esac



